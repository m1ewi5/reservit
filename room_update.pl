#!/usr/bin/perl
require('global_data.pl');
require('res_utilities_html_lib.pl');

################################################################################
#
#   Name:     room_update
#
#   Function: processes customer-generated room-block size input by rewriting
#             resState.db records whose date keys match keys processed by
#             retrieve_room_or_rates_data.pl.
#
#   Inputs:   Room reservation/availability/allocation values, by date.
#             resState.db records.
#
#   Outputs:  resState.db records
#
#   Caller:   print_rooms_header             res_utilities_html_lib.pl
#
#   Calls:    post_update_header             res_utilities_html_lib.pl
#             post_update_rooms              res_utilities_html_lib.pl
#             post_update_footer             res_utilities_html_lib.pl
#
#                        MODIFICATION                          DATE        BY
#
#   Harvey's Hotel/Casino                                    02/18/98   M. Lewis
#   Lakeside Inn                                             04/12/98   M. Lewis
#   Lakeside Inn    (add selective-date room-block update)   06/26/98   M. Lewis
#   Rodeway Inn                                              09/24/98   M. Lewis
# Revise for automated system                                10/17/00   M. Lewis
# Add code to keep existing stateTab rate values in an       08/18/01   M. Lewis
#  updated stateTab record.
# Remove code to generate a new stateTab rec -- it will never08/21/01   M. Lewis
#  be executed.
#

#variables
#
$buffer = '';
@pairs = '';
$name = '';
$value = '';
%FORM = ();
$mode = 0666;                                    #DBM file mode (doesn't work!)
$numRows = '';
%stateTab = '';
$i = 0;
$j = 0;
$k = 0;
$m = 0;
$n = 0;
$dateKey = '';
$dateMonth = '';

@valueType = ('A', 'B', 'C');

@numRms = sort(keys(%roomDef));                  #roomDef hash defined #10/17/00
                                                 # in global_data.pl   #10/17/00
$numRms = @numRms;                               #No. items in array   #10/17/00
@stateTmp = '';                                                        #08/18/01

#print "Content-Type: text/html\n\n";

# Get the input
read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});

# Split the name-value pairs
@pairs = split(/&/, $buffer);

foreach $pair (@pairs) {
   ($name, $value) = split(/=/, $pair);
   # Get rid of HTML CGI encoding
   $name =~ tr/+/ /;
   $value =~ tr/+/ /;
   $name =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
   $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
   $name =~ s/<!--(.|\n)*-->//g;
   $value =~ s/<!--(.|\n)*-->//g;

   if ($allow_html != 1) {
      $name =~ s/<([^>]|\n)*>//g;
      $value =~ s/<([^>]|\n)*>//g;
   } #endif
   $FORM{$name} = $value;                        #Name/value pairs -> hash
} #end while/foreach

$numRows = $FORM{'numRows'};                     #No. data rows displayed by
                                                 # caller

#Display the post-update page header
&post_update_header;

#Open resState.db and update all the records in the file whose date keys
# match date keys processed by room_block.pl.  If a record for a particular
# date key doesn't exist, create it.
#
dbmopen(%stateTab, $outFileName, $mode);

#This block constructs a hash whose structure is the same as the resState
# table, i.e.:
#
#         key = string of form MM|DD|YY
#         item value of form nnn|nnn|nnn|...|nnn
#
#   where each nnn corresponds to a value defined by the $stateStrng variables
#   in global_data.pl.  The values used to populate the hash are the room-data
#   values displayed by room_block.pl subroutines.  Each hash record created
#   here will either replace the corresponding record in resState or will be
#   written to resState as a new record.
#
for ($j = 0; $j < $numRows; $j++) {
   #Form a date key
   #
   #NOTE: $j is a unique row designator in the display table generated by the
   #      room_block.pl subroutines.
   #
   $dateMonth = $monthNum{$FORM{'month'.$j}};  #Convert date from num to strng
   $dateKey = join '|', $dateMonth, $FORM{'day'.$j},
                        $FORM{'year'.$j};

   @stateTmp = split (/\|/,                   #Copy stateTab record #08/21/01
                      $stateTab{$dateKey});   # to temp.            #08/21/01

   #In the following block, i counts the No. of room types in a record, m counts
   # groups of three values for each room type, k counts each value in a group
   # of three.
   #
   $m = 0;
   $n = 1;                                       #n indexes each "No. rms
                                                 # avail" value in the rec
   for ($i = 0; $i < $numRms; $i++) {                                  #10/17/00
      for ($k = 0; $k < 3; $k++) {
         #
         #NOTE: i+k+m increments from 0 to the (max-No.-items - 1) in  #10/17/00
         #      a resState record.
         #
         $stateTmp[$i + $k + $m] =                                     #08/18/01
           $FORM{$numRms[$i] . $j . $valueType[$k]}}                   #10/17/00
      #end for

      #See if the user wants to black-out the available rooms.
      #
      if (($FORM{'blackout'}) && ($stateTmp[$n-1] >= 0)) {             #08/18/01
         #
         #Set the No.-rooms-allocated to the No.-rooms-reserved so that the No.-
         # rooms-available go to 0 in the calculation below).
         #
         $stateTmp[$n+1] = $stateTmp[$n-1]}                            #08/18/01
      #endif

      #Now recalculate the No.-of-rooms-available value, which is the middle
      # value in each group of three values.  In the following block, n points
      # to this value.
      #
      #The updated No.-rooms-available value is:
      #
      #   new No. available = (No. allocated) - (No. reserved)
      #   i.e.,
      #
      $stateTmp[$n] = $stateTmp[$n+1] - $stateTmp[$n-1];               #08/18/01
      $m += 2;                                   #Adjust for 1st value in next
                                                 # group of 3.
      $n += 3}                                   #Next "No. rooms avail" value
   #end for

   &post_update_rooms($j, $FORM{'month'.$j},     #Print the values for this date
                      $FORM{'day' . $j},
                      $FORM{'year' . $j},
                      @stateTmp);

   $stateTab{$dateKey} = join '|', @stateTmp}                          #08/18/01
#end for

dbmclose(%stateTab);

&post_update_footer;                             #Display footer

exit;
